const Booking = require("~/models/Booking")

// L·∫•y t·∫•t c·∫£ booking
exports.getAllBookings = async (req, res) => {
  try {
    const bookings = await Booking.find().lean()
    // const bookings = await Booking.find().populate('customerId').populate('garageId');
    res.status(200).json(bookings)
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch booking", error })
  }
}

exports.getAllBookingsOfUser = async (req, res) => {
  try {
    const bookings = await Booking.find().lean()

    res.status(200).json(bookings)
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch booking", error })
  }
}
// // T·∫°o booking m·ªõi
// exports.createBooking = async (req, res) => {
//   try {
//     const newBooking = new Booking(req.body);
//     const savedBooking = await newBooking.save();
//     res.status(201).json(savedBooking);
//   } catch (error) {
//     res.status(400).json({ message: 'L·ªói khi t·∫°o booking', error });
//   }
// };
// const Booking = require('../models/Booking');

// üìå ƒê·∫∑t l·ªãch m·ªõi
const mongoose = require("mongoose")

// üìå ƒê·∫∑t l·ªãch m·ªõi
exports.createBooking = async (req, res) => {
  try {
    const {
      customerId,
      customerName,
      customerPhone,
      customerEmail,
      service,
      bookingDate, // bookingDate c·∫ßn ch·ª©a { date, timeSlot }
      garageId, // Nh·∫≠n garageId t·ª´ FE
      cancelReason
    } = req.body

    // const customerId = '67cfb1494fd45f254a02e4f6';

    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (
      !customerId ||
      !garageId ||
      !service ||
      !bookingDate ||
      !bookingDate.date ||
      !bookingDate.timeSlot
    ) {
      return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" })
    }

    // Chuy·ªÉn ƒë·ªïi garageId th√†nh ObjectId
    if (!mongoose.Types.ObjectId.isValid(garageId)) {
      return res.status(400).json({ message: "garageId kh√¥ng h·ª£p l·ªá!" })
    }

    const newBooking = new Booking({
      customerId,
      customerName,
      customerPhone,
      customerEmail,
      service,
      bookingDate: {
        date: bookingDate.date,
        timeSlot: bookingDate.timeSlot
      },
      garageId: new mongoose.Types.ObjectId(garageId), // Chuy·ªÉn ƒë·ªïi sang ObjectId
      status: "Pending",
      cancelReason: cancelReason || ""
    })

    await newBooking.save()

    res.status(201).json({
      message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng!",
      booking: newBooking
    })
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi ƒë·∫∑t l·ªãch!", error })
  }
}

// C·∫≠p nh·∫≠t booking (bao g·ªìm l√Ω do h·ªßy n·∫øu b·ªã Cancelled)
exports.updateBooking = async (req, res) => {
  try {
    const { id } = req.params
    const { status, cancelReason } = req.body

    const updateData = { status }
    if (status === "Cancelled" && cancelReason) {
      updateData.cancelReason = cancelReason
    }

    const updatedBooking = await Booking.findByIdAndUpdate(id, updateData, {
      new: true
    })

    if (!updatedBooking) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y booking" })
    }

    res.status(200).json(updatedBooking)
  } catch (error) {
    console.error("Error updating booking:", error)
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t booking", error })
  }
}
